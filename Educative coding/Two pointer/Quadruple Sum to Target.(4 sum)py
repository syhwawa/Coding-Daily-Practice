
Given an array of unsorted numbers and a target number, find all unique quadruplets in it, whose sum is equal to the target number.

Example 1:

Input: [4, 1, 2, -1, 1, -3], target=1
Output: [-3, -1, 1, 4], [-3, 1, 1, 2]
Explanation: Both the quadruplets add up to the target.
Example 2:

Input: [2, 0, -1, 1, -2, 2], target=2
Output: [-2, 0, 2, 2], [-1, 0, 1, 2]
Explanation: Both the quadruplets add up to the target.

def search_quadruplets(arr, target):
  arr.sort()
  res = []
  for i in range(len(arr) - 3): 
    if i > 0 and arr[i] == arr[i-1]:
      continue
    for j in range(i+1, len(arr) - 2):
      if j > i + 1 and arr[j] == arr[j - 1]:
        continue
      helper(arr, target, i, j, res)
  return res
  # TODO: Write your cod
def helper(arr, target_sum, first, second, res):
  left = second + 1
  right = len(arr) - 1

  while right > left:
    current_sum = arr[first] + arr[second] + arr[left] + arr[right]

    if target_sum == current_sum:
      res.append([arr[first] , arr[second] , arr[left] , arr[right]])
      left += 1
      right -= 1
    
      while right > left and arr[left] == arr[left - 1]:
        left += 1
      while right > left and arr[right] == arr[right + 1]:
        right -= 1
    elif target_sum < current_sum:
      right -= 1
    else:
      left += 1
