Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


class Solution:
    def merge(self, intervals):
        
        '''
        a = [a1, a2], b = [b1, b2]
        sort
        compare a2 and b1:
        if a[2] >= b1, merge two intervals, a[1] keep the same, a[2] = max[a2, b1]
        
        '''
        
        if not intervals:
            return []
        
        intervals.sort(key=lambda x: x[0])
        res = [intervals[0]]
        
        for x, y in intervals[1:]:
            if x > res[-1][1]:
                res.append([x, y])        
            else:
                res[-1][1] = max(y, res[-1][1])
        
        return res
        
        
        class Solution:
    def merge(self, intervals):
        if len(intervals) < 2:
            return intervals
        # sort the intervals on the first element
        intervals.sort(key=lambda x: x[0])
        res = []
        start = intervals[0][0]
        end = intervals[0][1]
        for i in range(1, len(intervals)):
            curr = intervals[i]
            if curr[0] <= end:# overlapping intervals, adjust the 'end'
                end = max(curr[1], end)
            else:# non-overlapping interval, add the previous internval and reset
                res.append([start, end])
                start = curr[0]
                end = curr[1]
                
        res.append([start,end])
        return res
    
    # Time complexity:  O(N * logN)
    # Space complexity: O(N)
