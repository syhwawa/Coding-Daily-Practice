An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).

Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, "flood fill" the image.

To perform a "flood fill", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.

At the end, return the modified image.

Example 1:
Input: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation: 
From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected 
by a path of the same color as the starting pixel are colored with the new color.
Note the bottom corner is not colored 2, because it is not 4-directionally connected
to the starting pixel.
Note:

The length of image and image[0] will be in the range [1, 50].
The given starting pixel will satisfy 0 <= sr < image.length and 0 <= sc < image[0].length.
The value of each color in image[i][j] and newColor will be an integer in [0, 65535].

方法：深度优先搜索
我们执行问题描述中的算法：从目标像素位置开始上色，渲染周边和目标像素初始颜色相同的像素。

算法：

将 color 置为目标像素初始颜色。我们从目标像素位置开始上色：若像素颜色和 color 相同则改变像素颜色为 newColor，然后再从四个方向进行上色，重复上述过程。
我们可以使用 dfs 函数对目标像素进行渲染。

class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:
        if image[sr][sc] == newColor:
            return image
        M = len(image)
        N = len(image[0])
        color = image[sr][sc]
        
        def dfs_(r,c):
            if image[r][c] == color: #colored the point with Newcolor
                image[r][c] = newColor
                if r >= 1: dfs_(r-1 ,c)
                if r+1 < M : dfs_(r+1, c)
                if c >= 1: dfs_(r, c-1)
                if c+1< N: dfs_(r,c+1)
            
        dfs_(sr, sc)
        
        return image
        
