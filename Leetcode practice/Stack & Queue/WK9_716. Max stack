Design a max stack that supports push, pop, top, peekMax and popMax.

push(x) -- Push element x onto stack.
pop() -- Remove the element on top of the stack and return it.
top() -- Get the element on the top.
peekMax() -- Retrieve the maximum element in the stack.
popMax() -- Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.
Example 1:
MaxStack stack = new MaxStack();
stack.push(5); 
stack.push(1);
stack.push(5);
stack.top(); -> 5
stack.popMax(); -> 5
stack.top(); -> 1
stack.peekMax(); -> 5
stack.pop(); -> 1
stack.top(); -> 5
Note:
-1e7 <= x <= 1e7
Number of operations won't exceed 10000.
The last four operations won't be called when stack is empty.

https://leetcode.com/articles/max-stack/
https://happyparrot.blogspot.com/2018/07/leetcode-716-max-stack.html?showComment=1590491158437#c233048780137177716

Solution: For popMax, we know what the current maximum (peekMax) is. We can pop until we find that maximum, then push the popped elements back on the stack.
Solution:
class MaxStack(list):
    def __init__(self):  
     """  
     initialize your data structure here.  
     """  
        self.stack = []
        self.max_stack = []
    
    def push(self, x):
        self.stack.append(x)
        if not self.max_stack:
            self.max_stack.append(x)
        else:
            self.max_stack.append(max(x, self.max_stack[-1]))

    def pop(self):
        v= self.stack.pop()
        self.max_stack.pop()
        return v

    def top(self):
        return self.stack[-1]

    def peekMax(self):
        return max_stack[-1]

    def popMax(self):
        max_value = max_stack[-1]
        poppedvalues = []
        v= self.pop()
        if v != max_value:
            poppedvalues.append(v)
            v = self.pop()
        for v in poppedvalues[::-1]:
            self.push(v)
        return max_value
      
