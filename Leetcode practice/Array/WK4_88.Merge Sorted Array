Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
官方题解中还有一些迷惑人的地方，涉及到 python3 的语言特性
排序法： nums1[:] = sorted(nums1[:m] + nums2) 以及 从前往后指针法：nums1_copy = nums1[:m], nums1[:] = []

我们可能会问，为何要使用 nums1[:]? 是否可以将 nums1[:] 换为 nums1 ?

我们来看一下题目要求：
对于 python3 语言， 题目要求：Do not return anything, modify nums1 in-place instead.
即，需要就地修改 nums1 对象，而不能新生成一个对象，并让 nums1 指向这一新对象。

注意到 python3 语言, 对象是一个盒子，有具体的地址，而变量名相当于是 "标签"，可以贴在盒子上。

我们需要辨析：nums1 = A 和 nums1[:] = A 的不同之处：

nums1 = A # 更改 nums1 这一变量名所指向的对象。让 nums1 变量指向 A 所指向的对象
nums1[:] = A # 对 nums1 指向的对象赋值。把 A 变量指向的对象的值逐个 copy 到 nums1 指向的对象中并覆盖 nums1 指向的对象的原来值。
nums1[:] 等价于 nums1[0:len(nums1)] 相当于取 nums1 对应的对象的一个视图，通常用这个来改变原对象的某几位值。
比如有时候，我们用 A[:2] = [0,1], 来改变 A 所指向的 list 对象的前两个值。
而如果用 A = [0,1], 则是让 A 这一变量名指向新的 list 对象 [0,1]

https://leetcode-cn.com/problems/merge-sorted-array/solution/gelthin-gui-bing-pai-xu-by-gelthin/

Solution1:
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        # Make a copy of nums1.
        nums1_copy = nums1[:m] 
        nums1[:] = []

        # Two get pointers for nums1_copy and nums2.
        p1 = 0 
        p2 = 0
        
        # Compare elements from nums1_copy and nums2
        # and add the smallest one into nums1.
        while p1 < m and p2 < n: 
            if nums1_copy[p1] < nums2[p2]: 
                nums1.append(nums1_copy[p1])
                p1 += 1
            else:
                nums1.append(nums2[p2])
                p2 += 1

        # if there are still elements to add
        if p1 < m: 
            nums1[p1 + p2:] = nums1_copy[p1:]
        if p2 < n:
            nums1[p1 + p2:] = nums2[p2:]
            
Solution 2: 
 class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        nums1[:] = sorted(nums1[:m] + nums2)
