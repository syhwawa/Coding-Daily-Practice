Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 
```Python
class Solution:
    def canJump(self, A: List[int]) -> bool:
        if not A:
            return False

        n = len(A)
        # state: dp[i] 代表能否跳到坐标 i
        dp = [False] * n
        
        # initialization: 一开始站在0这个位置
        dp[0] = True
        
        # function
        for i in range(1, n):
            for j in range(i):
                # 高效的写法:
                if dp[j] and j + A[j] >= i:
                    dp[i] = True
                    break
                # 偷懒的写法
                # dp[i] = dp[i] or dp[j] and (j + A[j] >= i)
        
        # answer
        return dp[n - 1]
```       
复杂度分析
时间复杂度：O(n2)，n为数组长度。双重遍历。
空间复杂度：O(n)，n为数组长度。建立的dp[]长度为n。
超时

```Python
class Solution:
    def canJump(self, A: List[int]) -> bool:
        '''
        依次遍历每个位置i
        如果i在rightmost范围内，说明i可达，我们将rightmost更新为max(rightmost, i + A[i])
        如果rightmost大于等于数组中的最后一个位置，那就说明最后一个位置可达，我们就可以直接返回True。
        如果在遍历结束后，最后一个位置仍然不可达，我们就返回 False 。
        '''
        
        rightmost, n = 0, len(A)
        for i in range(len(A)):
            if rightmost >= i:
                rightmost = max(rightmost, A[i] + i)
                if rightmost >= n-1:
                    return True
            
        return False
        
  ```       
#时间复杂度：O(n)，n为数组长度。一次遍历。
#空间复杂度：O(1)。
