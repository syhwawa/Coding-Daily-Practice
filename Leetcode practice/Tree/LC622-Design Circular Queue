Leetcode 622- Design Circular Queue
Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called ‘Ring Buffer’.
One of the Benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we can not insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.
Your implementation should support following operations:

MyCircularQueue(k): Constructor, set the size of the queue to be k.
Front: Get the front item from the queue. If the queue is empty, return -1.
Rear: Get the last item from the queue. If the queue is empty, return -1.
enQueue(value): Insert an element into the circular queue. Return true if the operation is successful.
deQueue(): Delete an element from the circular queue. Return true if the operation is successful.
isEmpty(): Checks whether the circular queue is empty or not.
isFull(): Checks whether the circular queue is full or not.
Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Your implementation should support following operations:

MyCircularQueue(k): Constructor, set the size of the queue to be k.
Front: Get the front item from the queue. If the queue is empty, return -1.
Rear: Get the last item from the queue. If the queue is empty, return -1.
enQueue(value): Insert an element into the circular queue. Return true if the operation is successful.
deQueue(): Delete an element from the circular queue. Return true if the operation is successful.
isEmpty(): Checks whether the circular queue is empty or not.
isFull(): Checks whether the circular queue is full or not.
 

Example:

MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3
circularQueue.enQueue(1);  // return true
circularQueue.enQueue(2);  // return true
circularQueue.enQueue(3);  // return true
circularQueue.enQueue(4);  // return false, the queue is full
circularQueue.Rear();  // return 3
circularQueue.isFull();  // return true
circularQueue.deQueue();  // return true
circularQueue.enQueue(4);  // return true
circularQueue.Rear();  // return 4
 
Note:

All values will be in the range of [0, 1000].
The number of operations will be in the range of [1, 1000].
Please do not use the built-in Queue library.
Accepted

循环队列(Circular Queue)
1. 循环队列的概念
1.1 循环队列的定义
为了能够充分地使用数组中的存储空间，克服”假溢出”现象，可以把数组的前端和后端连接起来，形成一个环形的表，即把存储队列元素的表从逻辑上看成一个环，成为循环队列(circular queue)。
1.2 循环队列中各元素的逻辑及存储关系
循环队列的首尾相接，当队头指针front和队尾指针rear进到maxSize-1后，再前进一个位置就自动到0。这可以利用除法取余的运算(%)来实现。
(1)队头指针进1：front = (front + 1) % maxSize；
(2)队尾指针进1：rear = (rear + 1) % maxSize；
1.3 循环队列的初始化、插入和删除
循环队列的队头指针和队尾指针初始化时都置为0：front = rear = 0。
在队尾插入新元素和删除队头元素时，两个指针都按顺时针方向进1。当他们进到maxSize-1时，并不表示表的终结，只要有需要，利用%运算可以前进到数组的0号位置。
(1)队空条件：如果循环队列读取元素的速度快于存入元素的速度，队头指针很快追上了队尾指针，一旦front == rear时，队列就变成空队列。
(2)队满条件：如果队列存入元素的速度快于读取元素的速度，队尾指针很快就追上了队头指针，一旦队列满就不能再加入新元素了。为了区别于队空条件，用(rear +１) ％ maxSize == front来判断是否队已满，就是说，让rear指到front的前一位置就认为队已满。
循环队列的模型：

注：如果不留一个空位置，让队尾指针rear一直走到这个位置，必然有rear == front，则队空条件和队满条件就混淆了。除非另加队空或队满标识，否则无从分辨到底是队空，还是队满。因此，在循环队列中，最多只能存放maxSize-1个元素。

#Solution:
class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.list = []
        self.size = k
        self.rear = 0

        
    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if not self.isFull():
            self.list.append(value)
            self.rear += 1
            return True
        else:
            return False
            

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if self.isEmpty():
            return False
        else:
            self.list.pop(0)
            self.rear -= 1
            return True
        
 
    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if self.isEmpty():
            return -1
        else:
            return self.list[0]
        

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if self.isEmpty():
            return -1
        else:
            return self.list[self.rear - 1]


    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        return 0 == self.rear
        

    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        return self.rear == self.size
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
