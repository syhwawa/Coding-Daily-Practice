Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].

Solution 1: using DFS
直接使用数组保存每层所有节点的值，最后需要做个求平均数的处理

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def averageOfLevels(self, root):
        res = []
        self.dfs(root, 0 ,res)
        return [sum(line)/ float (len(line)) for line in res]
    
    def dfs(self, node, level, res):
        if not node:
            return
        if level >= len(res):
            res.append([])
        res[level].append(node.val)
        self.dfs(node.left, level+1 ,res)
        self.dfs(node.right, level +1,res)
        
        
        
 Solution 2:BFS
其实层次遍历使用BFS比使用DFS更加简单高效。
因为每层遍历结束之后，已经知道了这一行的所有数字，所以可以直接求平均数，然后放入到结果中去，而不用最后才求平均数了。 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def averageOfLevels(self, root):
        
        que = collections.deque()
        res = []
        que.append(root)
        while que:
            size = len(que)
            row = []
            for _ in range(size):
                node = que.popleft()
                if not node:
                    continue
                row.append(node.val)
                que.append(node.left)
                que.append(node.right)
            if row:
                res.append(sum(row) / float(len(row)))
        return res

