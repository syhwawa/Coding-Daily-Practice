Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Solution: 
class Solution:
    def reverse(self, x: int) -> int:
        test_num = 0
        a = abs(x)
        
        while a != 0:
            remainder = a % 10
            test_num = (test_num * 10) + remainder
            a = int(a/10)
            
        if x > 0 and test_num < 2147483647ï¼š
            return test_num
        elif x < 0 and test_num <= 2147483647:
            return -test_num
        else:
            return 0
Solution 2:

class Solution:
    def reverse(self, x: int) -> int:
        y=int(str(x)[::-1]) if x>=0 else -int(str(x)[:0:-1])
        return y if -2**31<y<2**31-1 else 0
