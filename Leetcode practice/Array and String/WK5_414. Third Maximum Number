Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        nums_set = set(nums)
        
        if len(nums_set) < 3:
            return max(nums_set)
        
        N1, N2, N3 = float ('-inf'), float ('-inf'), float ('-inf')
        for nums in nums_set:
            if nums > N1:
                 N1, N2, N3 = nums, N1, N2
            elif nums > N2:
                N2, N3 = nums, N2
            elif nums > N3:
                N3 = nums
        return N3
            
            
