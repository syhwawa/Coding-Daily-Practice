Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.
Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
Note: The length of the given binary array will not exceed 50,000.

Solution:
用哈希表记录每个时刻0和1数字个数的差距，没有记录就添加记录，有记录的话就计算
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        #using Hashtable
        # length < 2, return 0
        if len(nums) < 2:
            return 0
        
        # replace 0 to -1
        for i in range(len(nums)):
            if nums[i] == 0:
                nums[i] =-1
        # record min subarray position, max length
        res = 0
        hashtable = {}
        prefix_sums = 0
        
        for i in range(len(nums)):
            prefix_sums += nums[i] # get prefix sum of subarray
            
            if prefix_sums == 0: # handle case: all of the element are counted
                res= i+1
        
            elif prefix_sums in hashtable:
                res = max(res, i- hashtable[prefix_sums]) # find max length
            
            else:
                hashtable[prefix_sums] = i # update position 
        
        return res
            

