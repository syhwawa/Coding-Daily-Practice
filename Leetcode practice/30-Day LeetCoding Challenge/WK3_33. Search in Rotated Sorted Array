Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

因为题目不允许我们逐个扫描，因此待搜索区间的第 1 个索引的位置、最后一个索引的位置、中间索引的位置就很重要，事实上，我们很容易能够根据中间索引的位置和第 1 个索引的位置（或者最后一个索引的位置）判断 mid 落在哪个有序的区间里。

还可以这样理解：中间元素把待搜索区间分成了两部分，两部分具有的性质是至少有一部分是有序的。

我们不妨讨论中间元素和右边界的关系（其它情况类似），因为不存在重复元素，所以它们的关系不是大于就是小于。

情况 1：nums[mid] < nums[right]，当中间元素的数值严格小于右边界的数值时候
1、此时区间 [mid, right] （表示左闭右闭，下同）一定是有序的；

2、因为 target 要么在有序区间 [mid, right] 里，要么在另一个区间 [left, mid - 1] 里。

（1）显然在有序区间 [mid, right] 里的条件好写，即：nums[mid] <= target <= nums[right]。因为 target 落在其中，所以能且只能等于其中的一个元素，当然包括头尾，此时设置 left = mid；

（2）落在另一个区间 [left, mid - 1] 里的时候，就是上一个情况的反面，这种情况用 else 表示即可，此时设置 right = mid - 1 是显然的。

关键：把比较好些的判断（target 落在有序的那部分）放在 if 的开头考虑，把剩下的情况放在 else 里面。

同理，讨论 nums[mid] < nums[right] 的反面（下面我的描述基本就是反过来讲的）。

情况 2：nums[mid] > nums[right]，当中间元素的数值严格小于右边界的数值时候，因为没有重复元素，所以是严格大于
1、此时区间 [left, mid] 内的元素一定是有序的；

2、因为 target 要么在有序区间 [left, mid] 里，要么在另一个区间 [mid + 1, right] 里。

（1）显然在有序区间 [left, mid] 里的条件好写，即：nums[left] <= target <= nums[mid]。因为 target 落在其中，所以能且只能等于其中的一个元素，当然包括头尾，此时设置 right = mid；

（2）落在另一个区间 [mid + 1, right] 里的时候，就是上一个情况的反面，这种情况用 else 表示即可，此时设置 left = mid + 1 是显然的。

此时发现：

情况 1 分支左右边界的收缩情况是：left = mid 与 right = mid - 1，它对应的中间数的取法是 int mid = (left + right + 1) >>> 1;；

情况 2 分支左右边的收缩情况是：left = mid + 1 与 right = mid，它对应的中间数的取法是 int mid = (left + right) >>> 1;，为了让二者一致，我们在情况 2 里强行只认为 [left, mid - 1] 有序。这样左右边界的收缩情况就和情况 1 一样了。

因为中间数的取法都是 int mid = (left + right + 1) >>> 1;； 因此在区间只剩下两个元素的时候，mid 会取到第 2 个元素，此时 mid - 1 一定不会越界。


Solution :

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)-1
        
        if len(nums)== 0: 
            return -1
        
        while right > left:
            mid = left + (right - left)//2 
            if nums[mid] < nums[right]:
                if nums[mid] < target <=nums[right]:
                    left = mid + 1
                else:
                    right = mid
            else:
                if nums[left] <= target <=nums[mid]:
                    right = mid 
                else:
                    left = mid +1 
                    
        if nums[left] == target:
            return left
        else:
            return -1
