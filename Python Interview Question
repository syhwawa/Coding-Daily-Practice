#Q1:
#Merging two sorted list
#We have two sorted lists, and we want to write a function to merge the two lists into one sorted list:

a = [3, 4, 6, 10, 11, 18]
b = [1, 5, 7, 12, 13, 19, 21]

#Answer:
a = [3, 4, 6, 10, 11, 18]
b = [1, 5, 7, 12, 13, 19, 21]
c = []

a.extend(b)
c = sorted(a)
print(c)
---------------------------------------------------------------------------------------
#Q2:
Get word frequency - initializing dictionary
We'll see two ways of initializing dictionary by solving word frequency problem.


ss = """I figured it out
I figured it out from black and white
Seconds and hours
Maybe they had to take some time"""

words = ss.split()
d = {}.fromkeys(words,0)
for w in words:
    d[w] += 1
print d

#Answer:
ss = """I figured it out
I figured it out from black and white
Seconds and hours
Maybe they had to take some time"""

d = {}
for w in ss.split():
    d[w] = d.get(w,0) + 1
print(d)

---------------------------------------------------------------------------------------
#Q3:
Initializing dictionary with list - I
Sometimes we may want to construct dictionary whose values are lists.

In the following example, we make a dictionary like {'Country': [cities,...], }:

#Original code:
cities = {'San Francisco': 'US', 'London':'UK',
        'Manchester':'UK', 'Paris':'France',
        'Los Angeles':'US', 'Seoul':'Korea'}

# => {'US':['San Francisco', 'Los Angeles'], 'UK':[,], ...}

#Answers:

from collections import defaultdict
# using collections.defaultdict()
d1 = defaultdict(list) # initialize dict with list
for k,v in cities.items():
    d1[v].append(k)
print d1

# using dict.setdefault(key, default=None)
d2 = {}
for k,v in cities.items():
       d2.setdefault(v,[]).append(k)
print d2

---------------------------------------------------------------------------------------
#Q4:字典转换为列表

dit = {'name':'zxf',
       'age':'22',
       'gender':'male',
       'address':'shanghai'}

# 将字典的key转换成列表
lst = list(dit)
print(lst)  # ['name', 'age', 'gender', 'address']

# 将字典的value转换成列表
lst2 = list(dit.values())
print(lst2)  # ['zxf', '22', 'male', 'shanghai']

---------------------------------------------------------------------------------------
#Q5:

#Answer:
def unique_names(names1, names2):
   return list(set(names1).union(set(names2)))

names1 = ["Ava", "Emma", "Olivia"] 
names2 = ["Olivia", "Sophia", "Emma"] 
print(unique_names(names1, names2))

['Olivia', 'Emma', 'Sophia', 'Ava']

---------------------------------------------------------------------------------------
#Q6:
Initializing dictionary with list - II
A little bit simpler problem. We have a list of numbers:

L = [1,2,4,8,16,32,64,128,256,512,1024,32768,65536,4294967296]
We want to make a dictionary with the number of digits as the key and list of numbers the value:
{1: [1, 2, 4, 8], 2: [16, 32, 64], 3: [128, 256, 512], 4: [1024], 5: [32768, 65536], 10: [4294967296]})

#Answer:

from collections import defaultdict
d = defaultdict(list)
for i in L:
    d[len(str(i))].append(i)
print(d)
print {k:v for k,v in d.items()}

---------------------------------------------------------------------------------------
#Q7:
map, filter, and reduce
Using map, filter, reduce, write a code that create a list of (n)**2 for range(10) for even integers:

#Answer:
l = [x for x in range(10) if x % 2 == 0]
print(l)

m = filter(lambda x:x % 2 == 0, [x for x in range(10)] )
# m = list( filter(lambda x:x % 2 == 0, [x for x in range(10)] ) ) # python3
print(m)

o = map(lambda x: x**2, m)
# o = list( map(lambda x: x**2, m) ) # python3
print(o)


p = reduce(lambda x,y:x+y, o)
# import functools . # python3
# p = functools.reduce(lambda x,y:x+y, o) # python3
print(p)
---------------------------------------------------------------------------------------
#Q7:
Build a string with the numbers from 0 to 100, "0123456789101112..."
We may want to use str.join rather than appending a number every time.

>>> ''.join([`x` for x in xrange(101)])
'0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100'
>>> 

















